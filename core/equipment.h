#ifndef XEQUIPMENT_H
#define XEQUIPMENT_H

#include "item.h"
#include "logger.h"

class Equipment : public Item {
private:
  float damage_multiplier;     //!< Accumulative Damage Variable multiplier for damage output
  float damage_mitigation;     //!< Accumulative Damage Variable mitigation for incoming damage
  float flux_multiplier;       //!< Accumulative Flux Variable multiplier for flux boost
  float flux_mitigation;       //!< Accumulative Flux Variable mitigation for debuffs
  float health_multiplier;     //!< Accumulative Health Variable multiplier for health boost
  float health_mitigation;     //!< Accumulative Health Variable mitigation for debuffs

public:
  Equipment();
  Equipment(const char *);
  /*!
   * @brief   Get the damage multiplier of the equipment.
   * @details This function returns the damage multiplier of the equipment.
   *          The damage multiplier affects the damage dealt by the equipment.
   * @return  float The damage multiplier of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_damage_multiplier();
  /*!
   * @brief   Get the damage mitigation of the equipment.
   * @details This function returns the damage mitigation of the equipment.
   *          The damage mitigation affects the damage received by the equipment.
   * @return  float The damage mitigation of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_damage_mitigation();
  /*!
   * @brief   Get the flux multiplier of the equipment.
   * @details This function returns the flux multiplier of the equipment.
   *          The flux multiplier affects the flux generated by the equipment.
   * @return  float The flux multiplier of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_flux_multiplier();
  /*!
   * @brief   Get the flux mitigation of the equipment.
   * @details This function returns the flux mitigation of the equipment.
   *          The flux mitigation affects the flux received by the equipment.
   * @return  float The flux mitigation of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_flux_mitigation();
  /*!
   * @brief   Get the health multiplier of the equipment.
   * @details This function returns the health multiplier of the equipment.
   *          The health multiplier affects the health generated by the equipment.
   * @return  float The health multiplier of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_health_multiplier();
  /*!
   * @brief   Get the health mitigation of the equipment.
   * @details This function returns the health mitigation of the equipment.
   *          The health mitigation affects the health received by the equipment.
   * @return  float The health mitigation of the equipment.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  float get_health_mitigation();
  /*!
   * @brief   Set the damage multiplier of the equipment.
   * @details This function sets the damage multiplier of the equipment.
   *          The damage multiplier affects the damage dealt by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new damage multiplier value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_damage_multiplier(float);
  /*!
   * @brief   Set the damage mitigation of the equipment.
   * @details This function sets the damage mitigation of the equipment.
   *          The damage mitigation affects the damage received by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new damage mitigation value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_damage_mitigation(float);
  /*!
   * @brief   Set the flux multiplier of the equipment.
   * @details This function sets the flux multiplier of the equipment.
   *          The flux multiplier affects the flux generated by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new flux multiplier value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_flux_multiplier(float);
  /*!
   * @brief   Set the flux mitigation of the equipment.
   * @details This function sets the flux mitigation of the equipment.
   *          The flux mitigation affects the flux received by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new flux mitigation value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_flux_mitigation(float);
  /*!
   * @brief   Set the health multiplier of the equipment.
   * @details This function sets the health multiplier of the equipment.
   *          The health multiplier affects the health generated by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new health multiplier value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_health_multiplier(float);
  /*!
   * @brief   Set the health mitigation of the equipment.
   * @details This function sets the health mitigation of the equipment.
   *          The health mitigation affects the health received by the equipment.
   *          The function only accepts a value between 0 and 2.0, inclusive.
   *          If the provided value is outside this range, it will not be applied.
   * @param[in] modifier - The new health mitigation value.
   *          The value is a float between 0 and 2.0, inclusive.
  */
  void set_health_mitigation(float);
  /*!
   * @brief   Validates the multiplier value.
   * @details This function checks if the provided multiplier value is within the valid range.
   *          The valid range for the multiplier is between 0 and 2.0, inclusive.
   * @param[in] modifier - The multiplier value to be validated.
   *          The value is a float between 0 and 2.0, inclusive.
   * @return  bool - Returns true if the modifier is within the valid range, false otherwise.
  */
  bool validate_multiplier(float);

  void _help();
  ~Equipment();
};

#endif // XEQUIPMENT_H //